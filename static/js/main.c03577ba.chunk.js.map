{"version":3,"sources":["Welcome.js","PartyForm.js","QueueButton.js","PartyView.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","Button","href","variant","Component","PartyForm","state","value","onHostButtonClicked","sendHostPartyMessage","props","socket","send","JSON","stringify","messageType","error","console","log","onJoinButtonClicked","event","preventDefault","sendJoinPartyMessage","message","partyCode","toUpperCase","handleChange","setState","target","Form","onSubmit","this","Group","as","Row","controlId","Label","column","sm","Col","onClick","Control","type","placeholder","maxLength","style","required","onChange","Feedback","QueueButton","disabled","onQueueButtonClicked","song","sendQueueSong","uri","isDisabled","PartyView","renderTable","songs","map","artists","forEach","artist","name","popularity","renderTabs","recommended","item","Tab","eventKey","genre","title","Table","striped","bordered","hover","renderRecommended","length","Tabs","fill","Spinner","animation","isHostView","isHost","Home","connect","loggedIn","WebSocket","self","onmessage","parse","data","response","access_token","token","isConnected","table","onerror","err","close","onclose","getDollarParams","e","dollarParams","r","w","window","location","split","exec","decodeURIComponent","redirect","to","partyView","App","basename","path","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c03577ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass Welcome extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome to All Tunes!</h1>\n                <p>Log in to Spotify to get started.</p>\n                <Button href='http://localhost:8888/login' variant=\"outline-success\">Get started</Button>{' '}\n            </div>\n        )\n    }\n}\n\nexport default Welcome;","import React, { Component } from 'react';\nimport { Button, Form, Col, Row } from 'react-bootstrap/';\n\nclass PartyForm extends Component {\n    state = {\n        value: ''\n    }\n\n    onHostButtonClicked = () => {\n        this.sendHostPartyMessage();\n    }\n\n    sendHostPartyMessage = () => {\n        var message = {\n            messageType: 'CREATE_PARTY'\n        };\n        try {\n            this.props.socket.send(JSON.stringify(message));\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    onJoinButtonClicked = (event) => {\n        event.preventDefault();\n        console.log(\"Join button clicked\");\n        this.sendJoinPartyMessage();\n    }\n\n    sendJoinPartyMessage = () => {\n        var message = {\n            messageType: 'JOIN_PARTY_REQUEST',\n            partyCode: this.state.value.toUpperCase()\n        };\n        try {\n            this.props.socket.send(JSON.stringify(message));\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ value: event.target.value });\n    }\n\n    render() {\n        return (\n            <div>\n                <Form onSubmit={this.onJoinButtonClicked}>\n                    <Form.Group as={Row} controlId=\"\">\n                        <Form.Label column sm=\"2\">\n                            Host a party\n                        </Form.Label>\n                        <Col sm=\"10\">\n                            <Button onClick={this.onHostButtonClicked}>Host party</Button>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"\">\n                        <Form.Label column sm=\"2\">\n                            Join a party\n                      </Form.Label>\n                        <Col sm=\"2\">\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Party code\"\n                                maxLength=\"6\"\n                                style={{ 'textTransform': 'uppercase' }}\n                                required\n                                value={this.state.value} \n                                onChange={this.handleChange}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please enter party code.\n                            </Form.Control.Feedback>\n                        </Col>\n                        <Col sm=\"5\">\n                            <Button type=\"submit\">Join party</Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default PartyForm;","import React, { Component } from 'react';\nimport {Button} from 'react-bootstrap';\n\nclass QueueButton extends Component {\n    state = {\n        value: '+',\n        disabled: false,\n    }\n\n    onQueueButtonClicked = (song) => {\n        this.sendQueueSong(song);\n        this.setState({disabled: true, value: '-'})\n    }\n\n    sendQueueSong = (song) => {\n        var message = {\n            messageType: 'QUEUE_SONG',\n            uri: song.uri,\n        };\n        try {\n            this.props.socket.send(JSON.stringify(message));\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    render() {\n        let isDisabled = this.state.disabled ? 'danger' : 'success';\n        return (\n        <Button \n            variant={isDisabled}\n            onClick={() => this.onQueueButtonClicked(this.props.song)}\n            disabled={this.state.disabled}\n        >\n            {this.state.value}\n        </Button>\n        )\n    }\n}\n\nexport default QueueButton;","import React, { Component } from 'react';\nimport { Tabs, Tab, Table, Spinner } from 'react-bootstrap';\nimport QueueButton from './QueueButton.js';\n\nclass PartyView extends Component {\n\n    renderTable = (songs) => {\n        return songs.map(song => {\n            let artists = ''\n            song.artists.forEach(artist => {\n                artists += artist.name + ', '\n            })\n            return (\n                <tr>\n                    <td>{song.name}</td>\n                    <td>{artists}</td>\n                    <td>{song.popularity}</td>\n                    <td><QueueButton song={song} socket={this.props.socket}/></td>\n                </tr>\n            )\n        })\n    }\n\n    renderTabs = () => {\n        return this.props.recommended.map((item) => {\n            return (\n                <Tab eventKey={item.genre} title={item.genre}>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Song</th>\n                                <th>Artist(s)</th>\n                                <th>Popularity</th>\n                                <th>Queue</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.renderTable(item.songs)}\n                        </tbody>\n                    </Table>\n                </Tab>\n            )\n        })\n    }\n\n    renderRecommended = () => {\n        if (this.props.recommended.length > 0) {\n            return (\n                <Tabs eventKey=\"1\" fill >\n                    {this.renderTabs()}\n                </Tabs>\n            )\n        } else {\n            return (\n                <div>\n                    <Spinner animation=\"border\" />\n                </div>\n            )\n        }\n    }\n\n\n    render() {\n        let isHostView = this.props.isHost ?\n            <div>\n                <label>You are host</label>\n                {this.renderRecommended()}\n            </div>\n            : null;\n        return (\n            <div>\n                <h1>Party: {this.props.partyCode}</h1>\n                {isHostView}\n            </div>\n        )\n    }\n}\n\nexport default PartyView;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PartyForm from './PartyForm.js';\nimport PartyView from './PartyView.js';\n//import { Table, Button } from 'react-bootstrap';\n\nclass Home extends Component {\n    constructor() {\n        super();\n        const params = this.getDollarParams();\n        const token = params.access_token;\n        this.state = {\n            loggedIn: token ? true : false,\n            socket: null,\n            token: token,\n            isHost: false,\n            partyCode: '',\n            isConnected: false,\n            recommended: [],\n        }\n    }\n\n    componentDidMount() {\n        this.connect();\n    }\n\n    connect = () => {\n        if (this.state.loggedIn) {\n            let socket = new WebSocket(\"ws://localhost:8888\");\n            this.setState({ socket: socket });\n            console.log('Connected to socket');\n\n            let self = this;\n\n            socket.onmessage = (event) => {\n                const message = JSON.parse(event.data);\n                console.log(message);\n                switch (message.messageType) {\n                    case 'SEND_ACCESS_TOKEN': {\n                        var response = {\n                            messageType: 'ACCESS_TOKEN',\n                            access_token: self.state.token\n                        };\n                        try {\n                            self.state.socket.send(JSON.stringify(response));\n                        } catch (error) {\n                            console.log(error);\n                        }\n                    }\n                        break;\n                    case 'CREATE_PARTY_SUCCESS': {\n                        let partyCode = message.partyCode;\n                        console.log('Hosting party: ' + partyCode);\n                        self.setState({ partyCode: partyCode, isHost: true, isConnected: true });\n                    }\n                        break;\n                    case 'JOINED_PARTY': {\n                        let partyCode = message.partyCode;\n                        console.log('Joined party: ' + partyCode);\n                        self.setState({ partyCode: partyCode, isConnected: true });\n                    }\n                        break;\n                    case 'JOIN_PARTY_ERROR': {\n                        self.setState({ isConnected: false, partyCode: '', isHost: false });\n                        console.log(\"Failed to join party \\n\" + message.error)\n                    }\n                        break;\n                    case 'UPDATE_RECOMMENDED': {\n                        console.table(message.data);\n                        self.setState({ recommended: message.data });\n                    }\n                        break;\n                    default: {\n                        console.log(\"Recieved unknown message\");\n                    }\n                }\n\n                socket.onerror = err => {\n                    console.error(\n                        \"Socket encountered error: \",\n                        err.message,\n                        \"Closing socket\"\n                    );\n                    self.setState({ isConnected: false, partyCode: '', isHost: false, recommended: [] });\n                    socket.close();\n                }\n\n                socket.onclose = () => {\n                    self.setState({ isConnected: false, partyCode: '', isHost: false, recommended: [] });\n                    console.log('disconnected')\n                    // automatically try to reconnect on connection loss\n                }\n            }\n        }\n    }\n\n    getDollarParams = () => {\n        var dollarParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.href;\n        var w = q.split('$')[1];\n        e = r.exec(w);\n        while (e) {\n            dollarParams[e[1]] = decodeURIComponent(e[2]);\n            e = r.exec(w);\n        }\n        return dollarParams;\n    }\n\n    render() {\n        let redirect = !this.state.loggedIn ? <Redirect to=\"/\" /> : null;\n        let partyView = this.state.isConnected ?\n            <PartyView\n                isHost={this.state.isHost}\n                partyCode={this.state.partyCode}\n                recommended={this.state.recommended}\n                socket={this.state.socket}\n            /> :\n            <PartyForm socket={this.state.socket} />\n        return (\n            <div>\n                {redirect}\n                {partyView}\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Route\n} from \"react-router-dom\";\nimport Welcome from './Welcome';\nimport Home from './Home.js';\n\nfunction App() {\n  return (\n    <Router basename='/'>\n        <Route path=\"/home\">\n          <Home />\n        </Route>\n        <Route exact path='/'>\n          <Welcome />\n        </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}